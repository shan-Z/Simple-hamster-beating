<!DOCTYPE html>
 <html>
 <head lang="en">
     <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
           name="viewport"/>
     <meta charset="UTF-8">
     	
     <!-- 引入样式 -->
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vant@2.0/lib/index.css">
	
	<!-- 引入组件 -->
    <script src='https://cdn.staticfile.org/vue/2.2.2/vue.min.js'></script>
	<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/vant@2.0/lib/vant.min.js"></script>
     <title></title>
     <style type="text/css">
         html, body {
             margin: 0;
             padding: 0;
             width: 100%;
             height: 100%;
             background: url(https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1564713293&di=9edbcfd9fcef5c9662a9333fb74cd80b&src=http://pic102.nipic.com/file/20160628/23363913_115853532571_2.jpg);
         }
         .page-actions{
         	padding:20px;
         }
         .time-box{
         	text-align: center;
         	font-size: 30px;
         }
         .btns-box{
         	text-align: center;
         	margin-top:20px;
         }
         .van-button{
         	width:100px;
         }
     </style>
     
 </head>
 <body>
	<div id="app" class="page">
		 
      	<div class="time-box">
        	<span>{{minute}}</span>:<span>{{second}}</span>
        </div>
		 <canvas class="myCanvas"  ref="myCanvas"  
		 	@touchstart="canvasStart($event)"
      		@touchend="canvasEnd($event)"
      	></canvas>
      	 <div class="page-actions">
      	 	
			 <div class="btns-box">操作：
			     <van-button type="warning" @click="stopTimer">停止</van-button>
			     <van-button type="info" @click="actionTimer">开始</van-button>
			 </div>
	      	
			 <div class="btns-box">速度：
			 	<van-button type="default" @click="addTime" :disabled='speedDisabled'>+100ms</van-button>
			 	<van-button type="default" @click="resTime"  :disabled='speedDisabled'>-100ms</van-button>
			 </div>
			 
			 <div class="btns-box">分数：
			     <van-button type="default" >{{score}}分</van-button>
			     <van-button type="danger" @click="clearCount">重来</van-button>
			 </div>
      	 </div>
		 
	</div>
  <script>
  	var vm = new Vue({
        el: '#app',
        data: {
           time:300,
           score:0,
           len:9,
           OffsetX:30,
           OffsetY:30,
           CH:320,
           CW:375,
           R:26,
           PointLocationArr:[],
           LinePoint:[],
           selectPoint:[],
           canvas:'', 
           cxt:'',
           minute:"00",
           second:"30",
           startSecond:"29",
           countDown:'',
           finallysecond:5,
           speedDisabled:false,
           pointColor:"#627eed",
           pointWith:5,
           canPoint:true,
           isStart:true,
        },
        mounted(){
        	setTimeout(() => {
        		canvas = this.$refs.myCanvas;
        		this.CW= document.documentElement.clientWidth;
        		canvas.width = this.CW;
	            canvas.height = this.CH;
	            this.cxt = canvas.getContext("2d");
	             //两个圆之间的外距离 就是说两个圆心的距离去除两个半径
	            var X = (this.CW - 2 * this.OffsetX - this.R * 2 * 3) / 2;
	            var Y = (this.CH - 2 * this.OffsetY - this.R * 2 * 3) / 2;
	            this.PointLocationArr = this.CaculateNinePointLotion(X, Y);
             	this.Draw(this.cxt,this.PointLocationArr,this.LinePoint,null);
        	},10)
        },
        methods: {
           Draw(cxt, _PointLocationArr, _LinePointArr,_selectPointArr) {
             for (var i = 0; i < _PointLocationArr.length; i++) {
                 var Point = _PointLocationArr[i];
                 cxt.fillStyle = "#627eed";
                 cxt.beginPath();
                 cxt.arc(Point.X, Point.Y, this.R, 0, Math.PI * 2, true);
                 cxt.closePath();
                 cxt.fill();
                 cxt.fillStyle = "#ffffff";
                 cxt.beginPath();
                 cxt.arc(Point.X, Point.Y, this.R - 3, 0, Math.PI * 2, true);
                 cxt.closePath();
                 cxt.fill();
                 if(_LinePointArr.indexOf(i)>=0)
                 {
                    
                     
		                 cxt.fillStyle = "red";
	                     cxt.beginPath();
	                     cxt.arc(Point.X, Point.Y, this.R -16, 0, Math.PI * 2, true);
	                     cxt.closePath();
	                     cxt.fill();
	                     
                     
                     
                 }
                 if(_selectPointArr) {
                 	if(_selectPointArr.indexOf(i)>=0){
                 		console.log(this.pointColor)
                 		console.log(this.pointWidth)
                 		 cxt.fillStyle = this.pointColor;
	                     cxt.fillStyle = grd;
		                 cxt.beginPath();
		                 cxt.arc(Point.X, Point.Y, this.R, 0, Math.PI * 2, true);
		                 cxt.closePath();
		                 cxt.fill();
		                 cxt.fillStyle = "#ffffff";
		                 cxt.beginPath();
		                 cxt.arc(Point.X, Point.Y, this.R - this.pointWidth, 0, Math.PI * 2, true);
		                 cxt.closePath();
		                 cxt.fill();
		                 
		                 var grd=cxt.createRadialGradient(Point.X, Point.Y, this.R-23 ,Point.X, Point.Y,this.R );
                 		 grd.addColorStop(0,this.pointColor);
						 grd.addColorStop(.4,"white");
                     	 cxt.fillStyle = grd;
	                     cxt.beginPath();
	                     cxt.arc(Point.X, Point.Y, this.R-16 , 0, Math.PI * 2, true);
	                     cxt.closePath();
	                     cxt.fill();
                     }
 				}
             }
           },
           IsPointSelect(touches) {
	             for (var i = 0; i < this.PointLocationArr.length; i++) {
	                 var currentPoint = this.PointLocationArr[i];
	                 var xdiff = Math.abs(currentPoint.X - touches.pageX);
	                 var ydiff = Math.abs(currentPoint.Y - touches.pageY);
	                 var dir = Math.pow((xdiff * xdiff + ydiff * ydiff), 0.5);
	                 if (dir < this.R+40 ) {//R加canvas距离页面顶部的高度
	                     if(this.selectPoint.indexOf(i) < 0){ 
	                     	this.selectPoint.push(i); 
	                     }
	                     break;
	                 }
	             }
         	},
         	CaculateNinePointLotion(diffX, diffY) {
	             var Re = [];
	             for (var row = 0; row < 3; row++) {
	                 for (var col = 0; col < 3; col++) {
	                     var Point = {
	                         X: (this.OffsetX + col * diffX + ( col * 2 + 1) * this.R),
	                         Y: (this.OffsetY + row * diffY + (row * 2 + 1) * this.R)
	                     };
	                     Re.push(Point);
	                 }
	             }
	             return Re;
	         },
	         RandLinePoint(cxt,PointLocationArr,time,len){
	        	
	         	this.timer= setInterval(() => {
	         		this.LinePoint = [];
	         		this.LinePoint.push(Math.floor(Math.random() * len))
		         	this.Draw(this.cxt,this.PointLocationArr,this.LinePoint,null);
		         	
		         	},time)
	         	this.second= 0 ;
		        this.msecond = 0;
		        this._CountDown();
	         },
	        stopTimer(){
	         	clearInterval(this.timer)
        		clearInterval(this.countDownTimer);
	         	this.speedDisabled = false
	         	this.startSecond = this.second
	         	this.canPoint = false
	         	this.isStart = true;
	        },
	        actionTimer() {
	        	if(!this.isStart) return;
	        	this.RandLinePoint(this.cxt,this.PointLocationArr,this.time,this.len)
	        	this.speedDisabled = true
	        	this.canPoint = true
	        	this.isStart = false;
	        },
	        addTime() {
	        	this.time -=100;//加速
	        },
	        resTime() {
	        	this.time +=100;//减速
            },
        	canvasStart(event){
        		//if(!this.canPoint)return;
        		this.IsPointSelect(event.touches[0]);
        	},
        	canvasMove(event){
        		event.preventDefault();
                var touches = event.touches[0];
                this.IsPointSelect(touches);
                this.cxt.clearRect(0,0,CW,CH);
                this.Draw(this.cxt,this.PointLocationArr,{X:touches.pageX,Y:touches.pageY});
        	},
        	canvasEnd(event){
        		this.cxt.clearRect(0,0,this.CW,this.CH);
        		this.Draw(this.cxt,this.PointLocationArr,this.LinePoint,this.selectPoint);
        		console.log(this.LinePoint+","+this.selectPoint)
                if(this.selectPoint.length>0 && this.selectPoint[0] == this.LinePoint[0]){
                	this.score ++;
                	this.pointColor = "red"
                	this.pointWidth = 5;
                }
                else{
                	this.pointColor = "#627eed"
                	this.pointWidth = 3
                }
                this.Draw(this.cxt,this.PointLocationArr,this.LinePoint,this.selectPoint);
                this.selectPoint=[];
                
        	},
        	//清空分数
        	clearCount() {
        		clearInterval(this.timer);
        		clearInterval(this.countDownTimer);
	        	this.score = 0;
        	},
        	//倒计时
		  	_CountDown(flag){
		  		this.second = this.startSecond;
		  		this.minute = "00";
		  		let second = parseInt(this.second);
		  		let minute = parseInt(this.minute);
		      	this.countDownTimer = setInterval(() => {
		      		if(second == 0){
		      			clearInterval(this.countDownTimer);
		      			clearInterval(this.timer)
		      			this.speedDisabled = false
		      		}
		      		else{
		      			second--;
		      			this.second = second;
		      			if(second<10){
		      				this.second = "0" + second;
		      			}
		      		}	
		      	},1000)
		  	},
        }
    })
  
  	</script>
 </body>
 </html>
 
